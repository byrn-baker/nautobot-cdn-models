---
# - name: Pulling Content Providers From Akamai
#   uri:
#     url: "{{akamai_prod_url}}content-delivery/v1/content-providers//?view=detail&pageNumber=1&pageSize=1000"
#     method: GET
#     return_content: yes
#     status_code: "200"
#     validate_certs: false
#     headers:
#       Accept: "application/json"
#       Authorization: "{{ akamai_prod_token }}"
#       validate_certs: false
#   register: content_provider_list

# - name: Loading Content Providers into Nautobot Dev instance
#   networktocode.nautobot.plugin:
#     url: "{{ dev_nb_url }}"
#     token: "{{ dev_nb_token }}"
#     plugin: akamai-config-manager
#     endpoint: cdncontentprovider
#     identifiers:
#       name: "{{item.name}}"
#       contentProviderId: "{{item.contentProviderId}}"
#   loop: "{{ content_provider_list.json.contentProviders }}"

# - name: Pulling CDN Prefixes From Akamai
#   uri:
#     url: "{{akamai_prod_url}}content-delivery/v1/content-providers/{{item.contentProviderId}}/cdn-prefixes/"
#     method: GET
#     return_content: yes
#     status_code: "200"
#     validate_certs: false
#     headers:
#       Accept: "application/json"
#       Authorization: "{{ akamai_prod_token }}"
#       validate_certs: false
#   loop: "{{content_provider_list.json.contentProviders}}"
#   register: cdn_prefix_list

# - name: Dump CDN Prefixes to YAML
#   copy:
#     content: "{{cdn_prefix_list | to_nice_yaml}}"
#     dest: ./tmp/cdn_prefix_list.yml

# - include_vars: ./tmp/cdn_prefix_list.yml
# - template:
#     src: cdn_prefix_list.j2
#     dest: ./tmp/templates/cdn_prefix_list.yml

# - include_vars: ./tmp/templates/cdn_prefix_list.yml
# - name: Pulling CDN Prefixes From Akamai
#   uri:
#     url: "{{akamai_prod_url}}content-delivery/v1/content-providers/{{item.contentProviderId}}/cdn-prefixes/{{item.cdnPrefixId}}"
#     method: GET
#     return_content: yes
#     status_code: "200"
#     validate_certs: false
#     headers:
#       Accept: "application/json"
#       Authorization: "{{ akamai_prod_token }}"
#       validate_certs: false
#   loop: "{{ cdn_prefixes }}"
#   register: cdn_prefix_list_detail

# - name: Pulling CDN Prefixes Rules From Akamai
#   uri:
#     url: "{{akamai_prod_url}}content-delivery/v1/content-providers/{{item.contentProviderId}}/cdn-prefixes/{{item.cdnPrefixId}}/rules"
#     method: GET
#     return_content: yes
#     status_code: "200"
#     validate_certs: false
#     headers:
#       Accept: "application/json"
#       Authorization: "{{ akamai_prod_token }}"
#       validate_certs: false
#   loop: "{{ cdn_prefixes }}"
#   register: cdn_prefix_list_rules

# - name: Dump CDN Prefixes details to YAML
#   copy:
#     content: "{{cdn_prefix_list_detail | to_nice_yaml}}"
#     dest: ./tmp/cdn_prefix_list_detail.yml

# - name: Dump CDN Prefixes details to YAML
#   copy:
#     content: "{{cdn_prefix_list_rules | to_nice_yaml}}"
#     dest: ./tmp/cdn_prefix_list_rules.yml

# - name: Pull down the UUID for each Content Providers
#   networktocode.nautobot.query_graphql:
#     url: "{{ dev_nb_url }}"
#     token: "{{ dev_nb_token }}"
#     validate_certs: False
#     query: "{{ query_content_provider }}"
#   register: nb_content_provider_list

# - include_vars: ./tmp/cdn_prefix_list_detail.yml
# - template:
#     src: cdn_prefix_details.j2
#     dest: ./tmp/templates/cdn_prefix_details.yml

# - include_vars: ./tmp/templates/cdn_prefix_details.yml
# - name: Loading CDN Prefixes into Nautobot Dev instance
#   networktocode.nautobot.plugin:
#     url: "{{ dev_nb_url }}"
#     token: "{{ dev_nb_token }}"
#     plugin: akamai-config-manager
#     endpoint: cdnprefix
#     identifiers:
#       name: "{{item.prefix}}"
#       cdnPrefixId: "{{item.cdnPrefixId}}"
#       ipAddressTagId: "{{ item.ipAddressTagId | default(omit) }}"
#       enable: "{{ item.enable }}"
#       dnsTtl: "{{ item.dnsTtl | default(omit) }}"
#       prefixPrioritization: "{{ item.prefixPrioritization | default(omit) }}"
#       keepaliveRequests: "{{ item.keepaliveRequests | default(omit) }}"
#       siteMapId: "{{ item.siteMapId | default(omit) }}"
#       accessMapId: "{{ item.accessMapId | default(omit) }}"
#       contentprovider: "{{ item.nb_contentprovider_id }}"
#   loop: "{{ prefix_details }}"

# - name: Pull down the UUID for each Prefix
#   networktocode.nautobot.query_graphql:
#     url: "{{ dev_nb_url }}"
#     token: "{{ dev_nb_token }}"
#     validate_certs: False
#     query: "{{ query_cdn_prefix }}"
#   register: nb_prefix_list

# - include_vars: ./tmp/cdn_prefix_list_rules.yml
# - template:
#     src: cdn_prefix_details_rules.j2
#     dest: ./tmp/templates/cdn_prefix_details_rules.yml

# - include_vars: ./tmp/templates/cdn_prefix_details_rules.yml
# - name: Adding CDN Prefixes Rules to Nautobot
#   uri:
#     url: "{{ dev_nb_url }}/api/plugins/akamai-config-manager/cdnprefixbehaviors/"
#     method: POST
#     return_content: yes
#     status_code: "201"
#     validate_certs: false
#     body_format: json
#     body: |
#       {
#         "name": "defaultBehaviors",
#         "slug": "defaultBehaviors-{{ item.nb_slug }}",
#         "rules": {{ item.defaultBehaviors | to_json }},
#         "cdnprefix": "{{ item.nb_prefix_id }}"
#       }
#     headers:
#       Content-Type: "application/json"
#       Accept: "application/json"
#       Authorization: "Token {{ dev_nb_token }}"
#   loop: "{{ cdn_prefixes }}"
#   when: item.defaultBehaviors is defined

# - name: Loading CDN Prefixes Rules into Nautobot Dev instance
#   uri:
#     url: "{{ dev_nb_url }}/api/plugins/akamai-config-manager/cdnprefixbehaviors/"
#     method: POST
#     return_content: yes
#     status_code: "201"
#     validate_certs: false
#     body_format: json
#     body: |
#       {
#         "name": "{{ item.1.name }}",
#         "slug": "{{ item.1.name | regex_replace('[^a-zA-Z0-9_-]', '')}}-{{ item.0.nb_slug }}",
#         "rules": {{ item.1.behaviors | to_json }},
#         "cdnprefix": "{{ item.0.nb_prefix_id }}"
#       }
#     headers:
#       Content-Type: "application/json"
#       Accept: "application/json"
#       Authorization: "Token {{ dev_nb_token }}"
#   loop: "{{ cdn_prefixes | subelements('children') }}"
#   loop_control:
#     loop_var: item
#   when: 
#     - item.0.children | length > 0
