# Generated by Django 3.2.22 on 2023-11-09 18:07

import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.core.models.tree_queries
import nautobot.extras.models.mixins
import nautobot.extras.models.models
import nautobot.extras.models.statuses
import nautobot.extras.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('extras', '0098_rename_data_jobresult_result'),
        ('dcim', '0049_remove_slugs_and_change_device_primary_ip_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='CdnSite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('local_redirectmap_context_data', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('local_redirectmap_context_data_owner_object_id', models.UUIDField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=100)),
                ('abbreviatedName', models.CharField(blank=True, max_length=255)),
                ('bandwidthLimitMbps', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(10000000)])),
                ('enableDisklessMode', models.BooleanField(default=False)),
                ('neighbor1_preference', models.IntegerField(blank=True, default=1000, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('neighbor2_preference', models.IntegerField(blank=True, default=750, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('siteId', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
            ],
            options={
                'ordering': ['cdn_site_role', 'name'],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin, nautobot.extras.models.models.ConfigContextSchemaValidationMixin),
        ),
        migrations.CreateModel(
            name='SiteRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='nautobot_cdn_models.siterole')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
            managers=[
                ('objects', nautobot.core.models.tree_queries.TreeManager()),
            ],
        ),
        migrations.CreateModel(
            name='RedirectMapContext',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('owner_object_id', models.UUIDField(blank=True, default=None, null=True)),
                ('weight', models.PositiveSmallIntegerField(default=1000)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('data', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('cdn_site_roles', models.ManyToManyField(blank=True, related_name='_nautobot_cdn_models_redirectmapcontext_cdn_site_roles_+', to='nautobot_cdn_models.SiteRole')),
                ('cdnsites', models.ManyToManyField(blank=True, related_name='_nautobot_cdn_models_redirectmapcontext_cdnsites_+', to='nautobot_cdn_models.CdnSite')),
                ('config_context_schema', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='redirectmapcontexts', to='extras.configcontextschema')),
                ('locations', models.ManyToManyField(blank=True, related_name='_nautobot_cdn_models_redirectmapcontext_locations_+', to='dcim.Location')),
                ('owner_content_type', models.ForeignKey(blank=True, default=None, limit_choices_to=nautobot.extras.utils.FeatureQuery('config_context_owners'), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='redirectmapcontexts', to='contenttypes.contenttype')),
                ('tags', models.ManyToManyField(blank=True, related_name='_nautobot_cdn_models_redirectmapcontext_tags_+', to='extras.Tag')),
            ],
            options={
                'ordering': ['weight', 'name'],
            },
            bases=(models.Model, nautobot.extras.models.models.ConfigContextSchemaValidationMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='HyperCacheMemoryProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('frontEndCacheMemoryPercent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('ramOnlyCacheMemoryPercent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('hotCacheMemoryPercent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('diskIndexMemoryPercent', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('cacheMemoryProfileId', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('tags', nautobot.core.models.fields.TagsField(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name',)},
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='cacheMemoryProfileId',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='CacheMemoryProfileId', to='nautobot_cdn_models.hypercachememoryprofile'),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='cdn_site_role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cdnsites', to='nautobot_cdn_models.siterole'),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='local_redirectmap_context_data_owner_content_type',
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(blank=True, default=None, limit_choices_to=nautobot.extras.utils.FeatureQuery('config_context_owners'), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cdn_sites', to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='local_redirectmap_context_schema',
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cdn_sites', to='extras.configcontextschema'),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cdnsites', to='dcim.location'),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='neighbor1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_neighbor', to='nautobot_cdn_models.cdnsite'),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='neighbor2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secondary_neighbor', to='nautobot_cdn_models.cdnsite'),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='status',
            field=nautobot.extras.models.statuses.StatusField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cdn_sites', to='extras.status'),
        ),
        migrations.AddField(
            model_name='cdnsite',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='_nautobot_cdn_models_cdnsite_tags_+', to='extras.Tag'),
        ),
        migrations.CreateModel(
            name='CdnGitRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('git_repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cdn_git_repositories', to='extras.gitrepository')),
                ('provides', models.ManyToManyField(blank=True, limit_choices_to={'model__in': ['redirectmapcontext', 'configcontext', 'config_context_schemas', 'export_templates', 'job']}, related_name='_nautobot_cdn_models_cdngitrepository_provides_+', to='contenttypes.ContentType')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='cdnsite',
            unique_together={('cdn_site_role', 'location', 'name')},
        ),
    ]
