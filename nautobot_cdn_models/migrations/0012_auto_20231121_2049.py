# Generated by Django 3.2.20 on 2023-11-21 20:49

import django.contrib.postgres.fields
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.fields
import nautobot.extras.models.mixins
import nautobot.extras.models.statuses
import taggit.managers
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('extras', '0053_relationship_required_on'),
        ('nautobot_cdn_models', '0011_cdnconfigcontext_failover_site'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=255)),
                ('account', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('enable', models.BooleanField(default=True)),
                ('contentProviderId', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=255)),
                ('account', nautobot.core.fields.AutoSlugField(blank=True, max_length=100, populate_from='name', unique=True)),
                ('enable', models.BooleanField(default=True)),
                ('serviceProviderId', models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='Origin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('enable', models.BooleanField(default=True)),
                ('originTimeout', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(300)])),
                ('hostnameOverride', models.CharField(max_length=255)),
                ('resolvableHostnames', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=10), size=8), size=8)),
                ('dynamicHierarchy', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('fastReroute', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('storagePartitionId', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('enableRequestIdExport', models.BooleanField(blank=True)),
                ('enableAuthenticatedContent', models.BooleanField(default=False)),
                ('enableSiteRedirects', models.BooleanField(default=False)),
                ('cachingType', models.CharField(default='OPTIMISTIC', max_length=32)),
                ('interSiteProtocol', models.CharField(default='HTTP', max_length=32)),
                ('intraSiteProtocol', models.CharField(default='HTTP', max_length=32)),
                ('edgeHostType', models.CharField(default='HTTP', max_length=32)),
                ('edgeHostname', models.CharField(blank=True, max_length=32)),
                ('ipAddressTypes', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=4), size=2), size=1)),
                ('contentProviderId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contentproviderid', to='nautobot_cdn_models.contentprovider')),
                ('status', nautobot.extras.models.statuses.StatusField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='nautobot_cdn_models_origin_related', to='extras.status')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.AddField(
            model_name='contentprovider',
            name='serviceProviderId',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='serviceproviderid', to='nautobot_cdn_models.serviceprovider'),
        ),
        migrations.AddField(
            model_name='contentprovider',
            name='tags',
            field=taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag'),
        ),
    ]
